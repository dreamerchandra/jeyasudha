{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/utils/escapeRegExp.ts","webpack:///./src/components/utils/formatValue.ts","webpack:///./src/index.ts","webpack:///./src/components/CurrencyInput.tsx","webpack:///external \"react\"","webpack:///./src/components/utils/index.ts","webpack:///./src/components/utils/cleanValue.ts","webpack:///./src/components/utils/parseAbbrValue.ts","webpack:///./src/components/utils/removeSeparators.ts","webpack:///./src/components/utils/removeInvalidChars.ts","webpack:///./src/components/utils/fixedDecimalValue.ts","webpack:///./src/components/utils/addSeparators.ts","webpack:///./src/components/utils/isNumber.ts","webpack:///./src/components/utils/padTrimValue.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","escapeRegExp","stringToGoIntoTheRegex","replace","formatValue","props","_value","groupSeparator","decimalSeparator","turnOffSeparators","prefix","isIndianNumberSystem","undefined","String","isNegative","RegExp","test","hasDecimalSeparator","includes","valueOnly","split","int","decimals","addSeparators","separator","CurrencyInput","forwardRef","ref","allowDecimals","allowNegativeValue","id","className","decimalsLimit","defaultValue","disabled","userMaxLength","userValue","onChange","onBlurValue","fixedDecimalLength","placeholder","precision","step","turnOffAbbreviations","Error","isNumber","formatValueOptions","cleanValueOptions","_defaultValue","useState","stateValue","setStateValue","cursor","setCursor","inputRef","useRef","processChange","selectionStart","cleanValue","length","formattedValue","useEffect","current","setSelectionRange","formattedPropsValue","type","inputMode","target","onBlur","fixedDecimals","fixedDecimalValue","newValue","padTrimValue","onFocus","onKeyDown","currentValue","Number","displayName","require","abbreviations","exec","prefixWithValue","preValue","withoutPrefix","concat","withoutSeparators","removeSeparators","withoutInvalidChars","removeInvalidChars","some","letter","toLowerCase","parsed","parseAbbrValue","includeNegative","trimmedDecimals","slice","abbrValue","_decimalPlaces","valueLength","Math","pow","round","abbrMap","k","b","reg","match","digits","abbr","multiplier","validChars","chars","join","hundredthSplitter","fromHundredth","tillHundredth","regexSeparator","separatedTillHundredth","input"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nexport const escapeRegExp = (stringToGoIntoTheRegex: string): string => {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n","import { addSeparators } from './addSeparators';\n\ntype Props = {\n  /**\n   * Value to format\n   */\n  value: number | string | undefined;\n\n  /**\n   * Decimal separator\n   *\n   * Default = '.'\n   */\n  decimalSeparator?: string;\n\n  /**\n   * Group separator\n   *\n   * Default = ','\n   */\n  groupSeparator?: string;\n\n  /**\n   * Turn off separators\n   *\n   * This will override Group separators\n   *\n   * Default = false\n   */\n  turnOffSeparators?: boolean;\n\n  /**\n   * Prefix\n   */\n  prefix?: string;\n  /**\n   * Allows to get formatted by indian numbering system\n   *\n   * Default = false\n   */\n  isIndianNumberSystem?: boolean;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nexport const formatValue = (props: Props): string => {\n  const {\n    value: _value,\n    groupSeparator = ',',\n    decimalSeparator = '.',\n    turnOffSeparators = false,\n    prefix,\n    isIndianNumberSystem = false,\n  } = props;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  const value = String(_value);\n\n  if (value === '-') {\n    return '-';\n  }\n\n  const isNegative = RegExp('^-\\\\d+').test(value);\n  const hasDecimalSeparator = decimalSeparator && value.includes(decimalSeparator);\n\n  const valueOnly = isNegative ? value.replace('-', '') : value;\n  const [int, decimals] = hasDecimalSeparator ? valueOnly.split(decimalSeparator) : [valueOnly];\n\n  const formattedInt = turnOffSeparators\n    ? int\n    : addSeparators({ value: int, separator: groupSeparator, isIndianNumberSystem });\n\n  const includePrefix = prefix ? prefix : '';\n  const includeNegative = isNegative ? '-' : '';\n  const includeDecimals =\n    hasDecimalSeparator && decimals\n      ? `${decimalSeparator}${decimals}`\n      : hasDecimalSeparator\n      ? `${decimalSeparator}`\n      : '';\n\n  return `${includeNegative}${includePrefix}${formattedInt}${includeDecimals}`;\n};\n","import CurrencyInput from './components/CurrencyInput';\n\nexport default CurrencyInput;\nexport { formatValue } from './components/utils/formatValue';\n","import React, { FC, useState, useEffect, useRef, forwardRef } from 'react';\nimport { CurrencyInputProps } from './CurrencyInputProps';\nimport {\n  isNumber,\n  cleanValue,\n  fixedDecimalValue,\n  formatValue,\n  padTrimValue,\n  CleanValueOptions,\n} from './utils';\n\nexport const CurrencyInput: FC<CurrencyInputProps> = forwardRef<\n  HTMLInputElement,\n  CurrencyInputProps\n>(\n  (\n    {\n      allowDecimals = true,\n      allowNegativeValue = true,\n      id,\n      name,\n      className,\n      decimalsLimit,\n      defaultValue,\n      disabled = false,\n      maxLength: userMaxLength,\n      value: userValue,\n      onChange,\n      onBlurValue,\n      fixedDecimalLength,\n      placeholder,\n      precision,\n      prefix,\n      step,\n      decimalSeparator = '.',\n      groupSeparator = ',',\n      turnOffSeparators = false,\n      turnOffAbbreviations = false,\n      isIndianNumberSystem = false,\n      ...props\n    }: CurrencyInputProps,\n    ref\n  ) => {\n    if (decimalSeparator === groupSeparator) {\n      throw new Error('decimalSeparator cannot be the same as groupSeparator');\n    }\n\n    if (isNumber(decimalSeparator)) {\n      throw new Error('decimalSeparator cannot be a number');\n    }\n\n    if (isNumber(groupSeparator)) {\n      throw new Error('groupSeparator cannot be a number');\n    }\n\n    const formatValueOptions = {\n      decimalSeparator,\n      groupSeparator,\n      turnOffSeparators,\n      prefix,\n      isIndianNumberSystem,\n    };\n\n    const cleanValueOptions: Partial<CleanValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      allowDecimals,\n      decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n      allowNegativeValue,\n      turnOffAbbreviations,\n      prefix,\n    };\n\n    const _defaultValue =\n      defaultValue !== undefined\n        ? formatValue({ value: String(defaultValue), ...formatValueOptions })\n        : '';\n    const [stateValue, setStateValue] = useState(_defaultValue);\n    const [cursor, setCursor] = useState(0);\n    const inputRef = ref || useRef<HTMLInputElement>(null);\n\n    const onFocus = (): number => (stateValue ? stateValue.length : 0);\n\n    const processChange = (value: string, selectionStart?: number | null): void => {\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (!valueOnly) {\n        onChange && onChange(undefined, name);\n        setStateValue('');\n        return;\n      }\n\n      if (userMaxLength && valueOnly.replace(/-/g, '').length > userMaxLength) {\n        return;\n      }\n\n      if (valueOnly === '-') {\n        onChange && onChange(undefined, name);\n        setStateValue(value);\n        return;\n      }\n\n      const formattedValue = formatValue({ value: valueOnly, ...formatValueOptions });\n\n      /* istanbul ignore next */\n      if (selectionStart !== undefined && selectionStart !== null) {\n        const cursor = selectionStart + (formattedValue.length - value.length) || 1;\n        setCursor(cursor);\n      }\n\n      setStateValue(formattedValue);\n\n      onChange && onChange(valueOnly, name);\n    };\n\n    const handleOnChange = ({\n      target: { value, selectionStart },\n    }: React.ChangeEvent<HTMLInputElement>): void => {\n      processChange(value, selectionStart);\n    };\n\n    const handleOnBlur = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>): void => {\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '-' || !valueOnly) {\n        onBlurValue && onBlurValue(undefined, name);\n        setStateValue('');\n        return;\n      }\n\n      const fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n\n      // Add padding or trim value to precision\n      const newValue = padTrimValue(\n        fixedDecimals,\n        decimalSeparator,\n        precision || fixedDecimalLength\n      );\n      onChange && onChange(newValue, name);\n      onBlurValue && onBlurValue(newValue, name);\n\n      const formattedValue = formatValue({ value: newValue, ...formatValueOptions });\n      setStateValue(formattedValue);\n    };\n\n    const handleOnKeyDown = ({ key }: React.KeyboardEvent<HTMLInputElement>) => {\n      if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n        const currentValue =\n          Number(\n            userValue !== undefined\n              ? userValue\n              : cleanValue({ value: stateValue, ...cleanValueOptions })\n          ) || 0;\n        const newValue =\n          key === 'ArrowUp'\n            ? String(currentValue + Number(step))\n            : String(currentValue - Number(step));\n\n        processChange(newValue);\n      }\n    };\n\n    /* istanbul ignore next */\n    useEffect(() => {\n      if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n        inputRef.current.setSelectionRange(cursor, cursor);\n      }\n    }, [cursor, inputRef]);\n\n    const formattedPropsValue =\n      userValue !== undefined\n        ? formatValue({ value: String(userValue), ...formatValueOptions })\n        : undefined;\n\n    return (\n      <input\n        type=\"text\"\n        inputMode=\"decimal\"\n        id={id}\n        name={name}\n        className={className}\n        onChange={handleOnChange}\n        onBlur={handleOnBlur}\n        onFocus={onFocus}\n        onKeyDown={handleOnKeyDown}\n        placeholder={placeholder}\n        disabled={disabled}\n        value={\n          formattedPropsValue !== undefined && stateValue !== '-' ? formattedPropsValue : stateValue\n        }\n        ref={inputRef}\n        {...props}\n      />\n    );\n  }\n);\n\nCurrencyInput.displayName = 'CurrencyInput';\n\nexport default CurrencyInput;\n","module.exports = require(\"react\");","export * from './cleanValue';\nexport * from './fixedDecimalValue';\nexport * from './formatValue';\nexport * from './isNumber';\nexport * from './padTrimValue';\n","import { parseAbbrValue } from './parseAbbrValue';\nimport { removeSeparators } from './removeSeparators';\nimport { removeInvalidChars } from './removeInvalidChars';\nimport { escapeRegExp } from './escapeRegExp';\n\nexport type CleanValueOptions = {\n  value: string;\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  allowDecimals?: boolean;\n  decimalsLimit?: number;\n  allowNegativeValue?: boolean;\n  turnOffAbbreviations?: boolean;\n  prefix?: string;\n};\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nexport const cleanValue = ({\n  value,\n  groupSeparator = ',',\n  decimalSeparator = '.',\n  allowDecimals = true,\n  decimalsLimit = 2,\n  allowNegativeValue = true,\n  turnOffAbbreviations = false,\n  prefix = '',\n}: CleanValueOptions): string => {\n  const abbreviations = turnOffAbbreviations ? [] : ['k', 'm', 'b'];\n  const isNegative = value.includes('-');\n\n  const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || [];\n  const withoutPrefix = prefix ? value.replace(prefixWithValue, '').concat(preValue) : value;\n  const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  const withoutInvalidChars = removeInvalidChars(withoutSeparators, [\n    groupSeparator,\n    decimalSeparator,\n    ...abbreviations,\n  ]);\n\n  let valueOnly = withoutInvalidChars;\n\n  if (!turnOffAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some((letter) => letter === withoutInvalidChars.toLowerCase())) {\n      return '';\n    }\n    const parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  const includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (String(valueOnly).includes(decimalSeparator)) {\n    const [int, decimals] = withoutInvalidChars.split(decimalSeparator);\n    const trimmedDecimals = decimalsLimit ? decimals.slice(0, decimalsLimit) : decimals;\n    const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : '';\n\n    return `${includeNegative}${int}${includeDecimals}`;\n  }\n\n  return `${includeNegative}${valueOnly}`;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Abbreviate number eg. 1000 = 1k\n *\n * Source: https://stackoverflow.com/a/9345181\n */\nexport const abbrValue = (value: number, decimalSeparator = '.', _decimalPlaces = 10): string => {\n  if (value > 999) {\n    let valueLength = ('' + value).length;\n    const p = Math.pow;\n    const d = p(10, _decimalPlaces);\n    valueLength -= valueLength % 3;\n\n    const abbrValue = Math.round((value * d) / p(10, valueLength)) / d + ' kMGTPE'[valueLength / 3];\n    return abbrValue.replace('.', decimalSeparator);\n  }\n\n  return String(value);\n};\n\ntype AbbrMap = { [key: string]: number };\n\nconst abbrMap: AbbrMap = { k: 1000, m: 1000000, b: 1000000000 };\n\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nexport const parseAbbrValue = (value: string, decimalSeparator = '.'): number | undefined => {\n  const reg = new RegExp(`(\\\\d+(${escapeRegExp(decimalSeparator)}\\\\d+)?)([kmb])$`, 'i');\n  const match = value.match(reg);\n\n  if (match) {\n    const [, digits, , abbr] = match;\n    const multiplier = abbrMap[abbr.toLowerCase()];\n    if (digits && multiplier) {\n      return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n    }\n  }\n\n  return undefined;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nexport const removeSeparators = (value: string, separator = ','): string => {\n  const reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove invalid characters\n */\nexport const removeInvalidChars = (value: string, validChars: ReadonlyArray<string>): string => {\n  const chars = escapeRegExp(validChars.join(''));\n  const reg = new RegExp(`[^\\\\d${chars}]`, 'gi');\n  return value.replace(reg, '');\n};\n","export const fixedDecimalValue = (\n  value: string,\n  decimalSeparator: string,\n  fixedDecimalLength?: number\n): string => {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      const [int, decimals] = value.split(decimalSeparator);\n      if (decimals.length > fixedDecimalLength) {\n        return `${int}${decimalSeparator}${decimals.slice(0, fixedDecimalLength)}`;\n      }\n    }\n\n    const reg =\n      value.length > fixedDecimalLength\n        ? new RegExp(`(\\\\d+)(\\\\d{${fixedDecimalLength}})`)\n        : new RegExp(`(\\\\d)(\\\\d+)`);\n\n    const match = value.match(reg);\n    if (match) {\n      const [, int, decimals] = match;\n      return `${int}${decimalSeparator}${decimals}`;\n    }\n  }\n\n  return value;\n};\n","/**\n * Add group separator to value eg. 1000 > 1,000\n */\nexport const addSeparators = ({\n  value,\n  separator = ',',\n  isIndianNumberSystem = false,\n}: {\n  value: string;\n  separator?: string;\n  isIndianNumberSystem?: boolean;\n}): string => {\n  const hundredthSplitter = value.length - 3 > 0 ? value.length - 3 : 0;\n  const fromHundredth = value.slice(hundredthSplitter, value.length);\n  const tillHundredth = value.slice(0, hundredthSplitter);\n  const regexSeparator = isIndianNumberSystem ? /\\B(?=(\\d{2})+(?!\\d))/g : /\\B(?=(\\d{3})+(?!\\d))/g;\n  const separatedTillHundredth = tillHundredth.replace(regexSeparator, separator);\n  return tillHundredth\n    ? `${separatedTillHundredth}${separator}${fromHundredth}`\n    : `${fromHundredth}`;\n};\n","export const isNumber = (input: string): boolean => RegExp(/\\d/, 'gi').test(input);\n","export const padTrimValue = (value: string, decimalSeparator = '.', precision?: number): string => {\n  if (!precision || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  const [int, decimals] = value.split(decimalSeparator);\n  let newValue = decimals || '';\n\n  if (newValue.length < precision) {\n    while (newValue.length < precision) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, precision);\n  }\n\n  return `${int}${decimalSeparator}${newValue}`;\n};\n"],"sourceRoot":""}